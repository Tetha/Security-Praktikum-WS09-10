format 70
"phase" // yaquix::phase
  revision 2
  modified_by 19 "hk"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "yaquix/phase"
  java_package "yaquix.phase"
  classview 128915 "phase"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 131987 "InputKnowledge"
      visibility public stereotype "interface"
      nformals 1
      formal name "C" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This models that a phase requires this knowledge as input.
@author hk
"
      operation 139923 "get"
	public explicit_return_type "C"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This fetches the knowledge stored earlier.
@return the stored knowledge"
      end
    end

    class 132115 "Knowledge"
      visibility public 
      nformals 1
      formal name "C" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 131987 // InputKnowledge
        rank 0 explicit_value ""
      actual class class_ref 132243 // OutputKnowledge
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class moves data from one phase to the next phase.
It implements the mediator design pattern.
@author hk

@param <C> The type of the knowledge to move"
      classrelation 130707 // <realization>
	relation 130707 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 130707 // <realization>
	  b parent class_ref 131987 // InputKnowledge
      end

      classrelation 130835 // <realization>
	relation 130835 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 130835 // <realization>
	  b parent class_ref 132243 // OutputKnowledge
      end

      attribute 132371 "value"
	private explicit_type "C"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 140179 "get"
	public explicit_return_type "C"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 140307 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "knowledge" explicit_type "C"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 132243 "OutputKnowledge"
      visibility public stereotype "interface"
      nformals 1
      formal name "C" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This models that a phase produces some knowledge.
@author hk
"
      operation 140051 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "knowledge" explicit_type "C"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This stores the knowledge for later usage
@param knowledge the knowledge to store"
      end
    end

    class 132371 "Phase"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A phase is the main design idea in this application.

A phase syncronizes the actions on the client and the
server, because by construction, the server and the
client will execute the same phase at the same time.
Thus, it follows that serverExecute and clientExecute
can be used to implement the operations required to
fulfill the goal of the phase. Note that serverExecute
and clientExecute need to use symmetric communications,
that is, if one calls sendFoo on the connection, the other
must call receiveFoo on the connection, otherwise the
application will hang.

@author hk
"
      attribute 132499 "logger"
	protected explicit_type "Logger"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "contains a logger to log the phase start and end.
"
      end

      operation 140435 "serverExecute"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "connection" type class_ref 128019 // Connection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This implements the actions the server side has to perform 
in order to complete the desired goal of the phase.
@param connection the connection used to communicate to
the other part"
      end

      operation 140563 "clientExecute"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "connection" type class_ref 128019 // Connection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This implements the actions the client has to perform
in order to complete the desired goal of the phase.
@param connection the connection used to communicate to
 the other part"
      end
    end

    class 132499 "SymmetricPhase"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This implements symmetric phases. Symmetric phases differ only in the
order of send/receive's (e.g. the client receives first, while the server
sends first). This difference is abstracted in the Connection class
via exchange-methods, and thus, we can remove duplication by implementing
this class which maps the different execute methods into a single
execute method, which is executed by both client and server.
@author hk
"
      classrelation 130963 // <generalisation>
	relation 130963 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 130963 // <generalisation>
	  b parent class_ref 132371 // Phase
      end

      operation 140691 "execute"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "connection" type class_ref 128019 // Connection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This executes the symmetrisc operations of the phase. Note
that inside the symmetric execution, you must not use send
and receive-methods, but exchange-methods or no communication
at all, as send/receive is intrinsically asymetric. (if 
the server sends, the client must receive, otherwise we
have a deadlock.)
@param connection the connection to communicate with the other part"
      end

      operation 140819 "serverExecute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "connection" type class_ref 128019 // Connection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 140947 "clientExecute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "connection" type class_ref 128019 // Connection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 135699 "ReadLearnWrite"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 150163 "ReadLearnWrite"
	public explicit_return_type ""
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 150291 "clientExecute"
	public explicit_return_type ""
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 150419 "serverExecute"
	public explicit_return_type ""
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 144019 // <dependency>
	relation 144019 -_->
	  a default
	    classrelation_ref 144019 // <dependency>
	  b parent class_ref 134035 // ID3Step
      end

      classrelation 144147 // <dependency>
	relation 144147 -_->
	  a default
	    classrelation_ref 144147 // <dependency>
	  b parent class_ref 132627 // Discretization
      end

      classrelation 145171 // <dependency>
	relation 145171 -_->
	  a default
	    classrelation_ref 145171 // <dependency>
	  b parent class_ref 135315 // OutputPhase
      end

      classrelation 145299 // <dependency>
	relation 145299 -_->
	  a default
	    classrelation_ref 145299 // <dependency>
	  b parent class_ref 135443 // ReadFolders
      end
    end
  end

  deploymentview 128787 "phase"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 131731 "InputKnowledge"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 131987 // InputKnowledge
      end
    end

    artifact 131859 "OutputKnowledge"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 132243 // OutputKnowledge
      end
    end

    artifact 131987 "Knowledge"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 132115 // Knowledge
      end
    end

    artifact 132115 "Phase"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.slf4j.Logger;
import yaquix.Connection;
${definition}"
      associated_classes
	class_ref 132371 // Phase
      end
    end

    artifact 132243 "SymmetricPhase"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import yaquix.Connection;
${definition}"
      associated_classes
	class_ref 132499 // SymmetricPhase
      end
    end
  end

  package_ref 129043 // attribute

  package_ref 129427 // classifier

  package_ref 129811 // io
end
